#!/usr/bin/env python

"""
.. module:: compareResults
   :synopsis: Compare sms files generated by Fastlim and SmodelS

.. moduleauthor:: Andre Lessa <lessa.a.p@gmail.com>

"""
import sys,os,glob
import logging
from sympy.assumptions.assume import Predicate
sys.path.append('../runTools')
home = os.path.expanduser("~")
sys.path.append(os.path.join(home,'smodels'))
from fastlimOutput import compareFiles
from collections import OrderedDict
from smodels.tools.physicsUnits import GeV, fb, TeV
import argparse

FORMAT = '%(levelname)s in %(module)s.%(funcName)s() in %(lineno)s: %(message)s'
logging.basicConfig(format=FORMAT)
logger = logging.getLogger(__name__)


def compareFolders(fastlimDir,smodelsDir,ignoreFields,allowedDiff,debug):
    """
    Compare the sms files in two folders.    
    If the any of the entries differ by more than allowedDiff, the entry and their
    values are stored in a dictionary.
    
    :param fastlimDir: folder containing .sms files generated by Fastlim
    :param smodelsDir: folder containing the .sms files generated by SModelS
    :param ignoreFields: fields/entries to be ignored when comparing the two files
    :param allowedDiff: allowed difference between the two numerical values (in percentage)
    :param debug: If True, differences will be printed to the screen    
    :return: python dictionary containing the files and their differences 
    """

    fastFiles = glob.glob(os.path.join(fastlimDir,'*.sms'))
    smodelsFiles = glob.glob(os.path.join(smodelsDir,'*.sms'))
    
    maxdiff = 0.
    nErrorFiles = 0
    diffsDict = {}
    for fastfile in fastFiles:
        fname = fastfile[fastfile.rfind('/')+1:]
        diffsDict[fname] = {}
        if not os.path.join(smodelsDir,fname) in smodelsFiles: continue
        #First check SLHA data (consistency check)
        if not compareFiles(fastfile,os.path.join(smodelsDir,fname),allowedDiff=0.01,
                            ignore=['ExptRes','extra']):
            logger.error("Data in %s have differ" %fname)
            sys.exit()
    
        #Load experimental results:
        fastf = open(fastfile,'r')
        fastPreds = eval(fastf.read().replace(' [fb]','*fb').replace('[GeV]','*GeV'))['ExptRes']
        fastf.close()
        fastPreds = sorted(fastPreds, key=lambda thpred: (thpred['AnalysisName'],thpred['DataSet']))
        smodf = open(os.path.join(smodelsDir,fname),'r')
        smodPreds = eval(smodf.read().replace(' [fb]','*fb').replace('[GeV]','*GeV'))
        sigmacut = smodPreds['extra']['sigmacut']
        smodPreds = smodPreds['ExptRes']
        smodf.close()
        smodPreds = sorted(smodPreds, key=lambda thpred: (thpred['AnalysisName'],thpred['DataSet']))
                
        missPredsFast = []
        for smod in smodPreds:
            fast = None
            #First find the same exp. result/dataset in Fastlim
            for j, fth in enumerate(fastPreds):            
                if fth['AnalysisName'] == smod['AnalysisName'] and  fth['DataSet'] == smod['DataSet']:
                    fast = fastPreds[j]
                    break
            if not fast:
                missPredsFast.append(smod['AnalysisName']+'/'+ smod['DataSet'])
                continue
            
            
            #Now check if the result for the particular exp. result/dataset matches
            for key in smod:
                diff = False
                if key in ignoreFields: continue
                if smod[key] == fast[key]: continue
                if key == 'tval':
                    if abs(smod[key] - fast[key]) < 2.*sigmacut: continue
                    vdiff = 2.*abs(smod[key]-fast[key])/abs(smod[key]+fast[key])
                    maxdiff = max(maxdiff,vdiff)
                    if vdiff > allowedDiff: diff = True
                elif key == 'AnalysisTopo':
                    if not set(fast['AnalysisTopo']).issubset(set(smod['AnalysisTopo'])):
                        diff = True                    
                elif isinstance(smod[key],float):
                    vdiff = 2.*abs(smod[key]-fast[key])/abs(smod[key]+fast[key])
                    maxdiff = max(maxdiff,vdiff)
                    if vdiff > allowedDiff: diff = True
                elif smod[key] != fast[key]: diff = True
                
                if diff:
                    label = smod['AnalysisName']+'/'+smod['DataSet']
                    if not label in diffsDict[fname]:
                        diffsDict[fname][label] = {}
                    diffsDict[fname][label][key] = [smod[key],fast[key]]
    
    
    
        missPredsSmod = []
        for fast in fastPreds:
            smod = None
            for j, sth in enumerate(smodPreds):            
                if sth['AnalysisName'] == fast['AnalysisName'] and  sth['DataSet'] == fast['DataSet']:
                    smod = smodPreds[j]
                    break
            if not smod and fast['tval'] > sigmacut:
                if fast['AnalysisName'] == 'ATLAS-CONF-2013-054': continue
                missPredsSmod.append(fast['AnalysisName']+'/'+fast['DataSet'])
                continue      
    
        if missPredsFast:
            diffsDict[fname]['Missing Results in Fastlim'] =  missPredsFast
        if missPredsSmod:
            diffsDict[fname]['Missing Results in SModelS'] =  missPredsSmod
    
    
        
        if debug:            
            if not diffsDict[fname]: continue
            nErrorFiles += 1
            print '\n-------------------SMODELS/FASTLIM for:',fname            
            for exp in diffsDict[fname]:
                if 'Missing Results' in exp: continue        
                print '\n------',exp
                for key,val in diffsDict[fname][exp].items():
                    print key,': ',val[0],'/',val[1]
            if missPredsFast:
                print '\nMissing Results in Fastlim:',diffsDict[fname]['Missing Results in Fastlim']
            if missPredsSmod:
                print '\nMissing Results in SModelS:',diffsDict[fname]['Missing Results in SModelS']
    
    print '\n\n---------------------------------------\nMaximum percentual difference for numerical values =',maxdiff
    print 'Error in %i files' %nErrorFiles
    return diffsDict

if __name__ == "__main__":
    
    argparser = argparse.ArgumentParser(description='Compares two folder containing the same .sms files')
    argparser.add_argument('fdir', help='name of folder containing the .sms files generated by Fastlim')
    argparser.add_argument('sdir', help='name of folder containing the .sms files generated by SModelS')
    argparser.add_argument('-diff', help='allowed difference for numerical values', type=float, default=0.05)
    argparser.add_argument('-ignore', nargs='+', help='list of entries to be ignored')
    argparser.add_argument('-debug', help='Option to print the differences to the screen', default=True)
    args = argparser.parse_args()  
    
    fastlimDir = args.fdir
    smodelsDir = args.sdir
    #Allowed difference for numerical values (0.01 = 1%)
    allowedDiff = args.diff
    debug = args.debug
    ignoreFields = ['Weights','DaughterMass','MotherMass']
    if args.ignore:
        ignoreFields = args.ignore
    
    res = compareFolders(fastlimDir,smodelsDir,ignoreFields,allowedDiff,debug)
    