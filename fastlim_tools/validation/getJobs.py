#!/usr/bin/env python

"""
.. module:: runFiles
   :synopsis: Used to collect the results from several jobs generated by submitJobs

.. moduleauthor:: Andre Lessa <lessa.a.p@gmail.com>

"""
import os,shutil
import argparse

if __name__ == "__main__":
    
    argparser = argparse.ArgumentParser(description='Collect results from submitJobs')
    argparser.add_argument('outdir', help='destination folder')
    argparser.add_argument('-logfile', help='name of logfile', default='log.dat')
    argparser.add_argument('-errorfile', help='name of PBS error file', default='err.log')
    argparser.add_argument('-errdir', help='error folder (used to collect failed files)', default=None)
    args = argparser.parse_args()    
    
    
    allerrors = {}
    logfile = args.logfile
    errfile = args.errorfile
    for root, dirs, files in os.walk('./'):
        if (logfile in files) and (errfile in files):
            errf = open(os.path.join(root,errfile),'r')
            if errf.read():  #Some thing happened (probably cluster time out). Redo all points
                for f in files:
                    if '.slha' in f and args.errdir:
                        shutil.move(os.path.join(root,f),os.path.join(args.errdir,f))
            else:
                lfile = open(os.path.join(root,logfile),'r')
                res = eval(lfile.read().replace('\n',''))
                if not res: continue
                lfile.close()            
                for f in res['successful']:                
                    shutil.move(os.path.join(root,f),os.path.join(args.outdir,f))           
                for f in res['failed']:
                    allerrors[f[0]] = f[1]
                    if args.errdir:
                        slhafile = f[0].replace('.sms','.slha')
                        shutil.move(os.path.join(root,slhafile),os.path.join(args.errdir,slhafile))
            #shutil.rmtree(root)
    for f in allerrors:
        print f,allerrors[f]
            
        