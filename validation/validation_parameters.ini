#Database address
[path]
databasePath = ../../smodels-database ; Give path to the database "text" directory or to the binary database file
slhaPath     = ../slha ; Give path to the folder containing the txname.tar files
smodelsPath  = ../../smodels
utilsPath    = ../../smodels-utils
#tarfiles = T1Disp_red.tar.gz  ; (OPTIONAL) The name(s) of the tarfile(s). Must match the list in txnames.

#Select database analyses
[database]
analyses = ATLAS-SUSY-2019-08 ;Set all to use all analyses included in the database
#to use only specific analyses, give a list of the names, e.g.
#analyses = CMS-PAS-SUS-13-008,CMS-SUS-13-013,ATLAS-CONF-2013-024,ATLAS-SUSY-2013-04
#analyses = CMS-SUS-13-004
txnames = TChiWH ; Set all to use all constraints included in the database
#to use only specific constraints, give a list of the names, e.g.
#txnames = T2
dataselector = combined
#dataselector= combined ; Allows to select specific data sets (signal regions) or dataType, e.g. upperLimit, efficiencyMap, data-cut0. combined means use results obtained from combining all signal regions.

[options]
prettyPlots = both ; If True it will produce pretty plots, 'both' generates pretty and ugly plots, 'dictonly' produces the python dictionary only, no plotting (except possible ratio and best SR plots)
generateData = True ; Set to True to run SModelS on the slha files. If False, use the already existing *.py files in the validation folder. If None or 'ondemand', produce data only if none are found.
# limitPoints = 10 ; Limit the number of probed model points, randomly chosen. If negative or left out, take all slha files.
extraInfo = True ; put extra info on plot, like the time stamp, average time spent on model point, agreement factor, hostname
ncpus = 2 ; number of processes, negative number means number of CPU cores on the machine + ncpus + 1.
## model = mssm ; the model to use, e.g. mssm, nmssm, idm. The default is "default", which means extract from slha file
# drawChi2Line = False ; draw an exclusion line derived from chi2 values in green (only on pretty plot )
# sigmacut = 0.000000001 ; Give minimum cross section value [fb] considered in SLHA decomposition (relevant for SLHA decomposition and detection of missing topologies)
# minmassgap = 2.0 ; Give minimum mass gap [GeV] for mass compression
# maxcond = 1.0 ;  Maximum relative violation of conditions for valid results
# promptWidth=1.1 ; All particles with widths (in GeV) above this value are considered prompt
## axis = 2*[[x,y]] ; the axis. if not given or "None", use all axes from sms.root.
# style = sabine ; special styles can be specified; currently only "sabine" exists
# style sabine: SR label "pyhf combining 2 SRs" gets moved to top left corner of temperature plot in pretty print
# legendplacement = top left ; one of: top left, top right, automatic
# drawExpected = auto ; draw expected exclusion lines (True,False,auto)
# recordPlotCreation = True ; if you need the python script that produces the pretty plot
# validationFolder = validation ; here you can specify an alternate validation folder name
# keepTopNSRs = 10 ; keep an ordered list of top <n> signal regions, good for trimming and aggregating
# model = default ; which model to use (default = take from slha file)
# ratioPlots = True ; plot also ratioplots, if possible. defaults to true
# timeOut = 5000 ; set the modelTester's timeout per point, in seconds [5000]
# tempdir = tmpXXX ; if you wish, you can specify the name of the temp directory
# expectationType = prior ; change expectation type, default is posteriori
# forceOneD = False ; force interpretation as a 1d plane, even if its (artifically made) two-dimensional
# preliminary = False ; add label 'preliminary' to plot
# plotInverse = False ; only for 1d-plots, plots ULs on mu instead of r-values
#drawPaperPlot = True ; draw obs and exp plots with official, bestSR and combined(if present) exclusion lines on the same plot
# createSModelSExclJson = True ; create SModelS Exclusion Json file, similar to official exclusion_jsons file
# useTevatronCLsConstruction = False ; use tevatron's way of computing CLs [P(s+b) and P(b)], not LHC's Asimov construction
# asimovIsEpected = True ; asimov data is expected data (for comparison pyhf <-> nn)
# spey = False ; use spey for statistical inference

#Specify k-factors
[kfactors]
TChiChipmStauStau = 1.25
TChiChipmSlepStau = 1.25
TChiChipmStauL = 1.25
TChipChimStauSnu = 1.25
TChipChimSlepSnu = 1.25
TChiChiSlepSlep = 1.25
T5Hg = 2.
TRV1 = 1.2
TRS1 = 1.2
